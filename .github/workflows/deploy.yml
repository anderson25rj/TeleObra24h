name: Deploy All Versions to Vercel

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '20'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  # Lint and test job - runs first
  lint-and-build:
    name: Lint and Build Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Build all apps
        run: npm run build

  # Deploy V1 to Vercel
  deploy-v1:
    name: Deploy V1 to Vercel
    runs-on: ubuntu-latest
    needs: lint-and-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production-v1
      url: https://v1-teleobra24h.vercel.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build V1
        run: npm run build:v1

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_V1_ID }}
          working-directory: ./apps/v1
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # Deploy V2 to Vercel
  deploy-v2:
    name: Deploy V2 to Vercel
    runs-on: ubuntu-latest
    needs: lint-and-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production-v2
      url: https://v2-teleobra24h.vercel.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build V2
        run: npm run build:v2

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_V2_ID }}
          working-directory: ./apps/v2
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # Deploy V3 to Vercel
  deploy-v3:
    name: Deploy V3 to Vercel
    runs-on: ubuntu-latest
    needs: lint-and-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production-v3
      url: https://v3-teleobra24h.vercel.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build V3
        run: npm run build:v3

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_V3_ID }}
          working-directory: ./apps/v3
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # Notify deployment status
  notify-completion:
    name: Deployment Complete
    runs-on: ubuntu-latest
    needs: [deploy-v1, deploy-v2, deploy-v3]
    if: always()
    steps:
      - name: Check deployment status
        run: |
          echo "V1 Deployment: ${{ needs.deploy-v1.result }}"
          echo "V2 Deployment: ${{ needs.deploy-v2.result }}"
          echo "V3 Deployment: ${{ needs.deploy-v3.result }}"

          if [[ "${{ needs.deploy-v1.result }}" == "success" ]] && \
             [[ "${{ needs.deploy-v2.result }}" == "success" ]] && \
             [[ "${{ needs.deploy-v3.result }}" == "success" ]]; then
            echo "All deployments successful!"
            exit 0
          else
            echo "Some deployments failed!"
            exit 1
          fi
